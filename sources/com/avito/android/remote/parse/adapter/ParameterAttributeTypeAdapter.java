package com.avito.android.remote.parse.adapter;

import a2.b.a.a.a;
import com.avito.android.remote.model.category_parameters.AutoGeneratedValue;
import com.avito.android.util.JsonNullParsingException;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
@Metadata(bv = {1, 0, 3}, d1 = {"\u0000$\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0006\u0018\u00002\b\u0012\u0004\u0012\u00020\u00020\u0001B\u0007¢\u0006\u0004\b\r\u0010\u000eJ\u001f\u0010\u0007\u001a\u00020\u00062\u0006\u0010\u0004\u001a\u00020\u00032\u0006\u0010\u0005\u001a\u00020\u0002H\u0016¢\u0006\u0004\b\u0007\u0010\bJ\u0019\u0010\u000b\u001a\u0004\u0018\u00010\u00022\u0006\u0010\n\u001a\u00020\tH\u0016¢\u0006\u0004\b\u000b\u0010\f¨\u0006\u000f"}, d2 = {"Lcom/avito/android/remote/parse/adapter/ParameterAttributeTypeAdapter;", "Lcom/google/gson/TypeAdapter;", "Lcom/avito/android/remote/model/category_parameters/AutoGeneratedValue$Attribute;", "Lcom/google/gson/stream/JsonWriter;", "writer", "value", "", "write", "(Lcom/google/gson/stream/JsonWriter;Lcom/avito/android/remote/model/category_parameters/AutoGeneratedValue$Attribute;)V", "Lcom/google/gson/stream/JsonReader;", "reader", "read", "(Lcom/google/gson/stream/JsonReader;)Lcom/avito/android/remote/model/category_parameters/AutoGeneratedValue$Attribute;", "<init>", "()V", "models_release"}, k = 1, mv = {1, 4, 2})
public final class ParameterAttributeTypeAdapter extends TypeAdapter<AutoGeneratedValue.Attribute> {
    @Override // com.google.gson.TypeAdapter
    @Nullable
    public AutoGeneratedValue.Attribute read(@NotNull JsonReader jsonReader) {
        Intrinsics.checkNotNullParameter(jsonReader, "reader");
        if (jsonReader.peek() != JsonToken.NULL) {
            JsonToken peek = jsonReader.peek();
            JsonToken jsonToken = JsonToken.BEGIN_OBJECT;
            if (peek == jsonToken) {
                jsonReader.beginObject();
                String str = null;
                String str2 = null;
                String str3 = null;
                String str4 = null;
                Boolean bool = null;
                while (jsonReader.hasNext()) {
                    String nextName = jsonReader.nextName();
                    if (nextName != null) {
                        switch (nextName.hashCode()) {
                            case -980110702:
                                if (!nextName.equals("prefix")) {
                                    break;
                                } else {
                                    str3 = jsonReader.nextString();
                                    continue;
                                }
                            case -861252683:
                                if (!nextName.equals("fieldId")) {
                                    break;
                                } else {
                                    str = jsonReader.nextString();
                                    continue;
                                }
                            case -393139297:
                                if (!nextName.equals("required")) {
                                    break;
                                } else {
                                    bool = Boolean.valueOf(jsonReader.nextBoolean());
                                    continue;
                                }
                            case -391205003:
                                if (!nextName.equals("postfix")) {
                                    break;
                                } else {
                                    str4 = jsonReader.nextString();
                                    continue;
                                }
                            case 3575610:
                                if (!nextName.equals("type")) {
                                    break;
                                } else {
                                    str2 = jsonReader.nextString();
                                    continue;
                                }
                        }
                    }
                    jsonReader.skipValue();
                }
                jsonReader.endObject();
                if (str == null) {
                    return AutoGeneratedValue.Attribute.UnknownAttribute.INSTANCE;
                }
                if (Intrinsics.areEqual(str2, "parameter")) {
                    return new AutoGeneratedValue.Attribute.ParameterAttribute(str, str3, str4, bool);
                }
                return AutoGeneratedValue.Attribute.UnknownAttribute.INSTANCE;
            }
            throw new IllegalStateException(a.z2(jsonReader, a.P("Expected ", jsonToken, " but was "), " at ", jsonReader));
        }
        throw new JsonNullParsingException();
    }

    public void write(@NotNull JsonWriter jsonWriter, @NotNull AutoGeneratedValue.Attribute attribute) {
        Intrinsics.checkNotNullParameter(jsonWriter, "writer");
        Intrinsics.checkNotNullParameter(attribute, "value");
        if (!(attribute instanceof AutoGeneratedValue.Attribute.ParameterAttribute)) {
            attribute = null;
        }
        AutoGeneratedValue.Attribute.ParameterAttribute parameterAttribute = (AutoGeneratedValue.Attribute.ParameterAttribute) attribute;
        if (parameterAttribute == null) {
            jsonWriter.nullValue();
            return;
        }
        jsonWriter.beginObject();
        jsonWriter.name("fieldId");
        jsonWriter.value(parameterAttribute.getParameterId());
        jsonWriter.name("prefix");
        jsonWriter.value(parameterAttribute.getPrefix());
        jsonWriter.name("postfix");
        jsonWriter.value(parameterAttribute.getPostfix());
        jsonWriter.name("required");
        jsonWriter.value(parameterAttribute.getRequired());
        jsonWriter.name("type");
        jsonWriter.value("parameter");
        jsonWriter.endObject();
    }
}
