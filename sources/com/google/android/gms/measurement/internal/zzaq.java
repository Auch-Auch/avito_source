package com.google.android.gms.measurement.internal;

import android.content.Context;
import androidx.annotation.Nullable;
import com.google.android.exoplayer2.audio.AacUtil;
import com.google.android.exoplayer2.upstream.DefaultLoadErrorHandlingPolicy;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzci;
import com.google.android.gms.internal.measurement.zzcx;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import ru.avito.messenger.internal.ConstantsKt;
@VisibleForTesting
public final class zzaq {
    public static zzeo<Long> zza = zza("measurement.ad_id_cache_time", 10000L, 10000L, zzat.zza);
    public static zzeo<Long> zzaa = zza("measurement.upload.retry_time", 1800000L, 1800000L, zzbk.zza);
    public static zzeo<Integer> zzab = zza("measurement.upload.retry_count", 6, 6, zzbn.zza);
    public static zzeo<Long> zzac = zza("measurement.upload.max_queue_time", 2419200000L, 2419200000L, zzbm.zza);
    public static zzeo<Integer> zzad = zza("measurement.lifetimevalue.max_currency_tracked", 4, 4, zzbp.zza);
    public static zzeo<Integer> zzae = zza("measurement.audience.filter_result_max_count", 200, 200, zzbr.zza);
    public static zzeo<Integer> zzaf = zza("measurement.upload.max_public_user_properties", 25, 25, null);
    public static zzeo<Integer> zzag = zza("measurement.upload.max_event_name_cardinality", 500, 500, null);
    public static zzeo<Integer> zzah = zza("measurement.upload.max_public_event_params", 25, 25, null);
    public static zzeo<Long> zzai = zza("measurement.service_client.idle_disconnect_millis", 5000L, 5000L, zzbq.zza);
    public static zzeo<Boolean> zzaj;
    public static zzeo<String> zzak = zza("measurement.test.string_flag", "---", "---", zzbs.zza);
    public static zzeo<Long> zzal = zza("measurement.test.long_flag", -1L, -1L, zzbv.zza);
    public static zzeo<Integer> zzam = zza("measurement.test.int_flag", -2, -2, zzbu.zza);
    public static zzeo<Double> zzan;
    public static zzeo<Integer> zzao = zza("measurement.experiment.max_ids", 50, 50, zzbw.zza);
    public static zzeo<Integer> zzap = zza("measurement.max_bundles_per_iteration", 2, 2, zzbz.zza);
    public static zzeo<Boolean> zzaq;
    public static zzeo<Boolean> zzar;
    public static zzeo<Boolean> zzas;
    public static zzeo<Boolean> zzat;
    public static zzeo<Boolean> zzau;
    public static zzeo<Boolean> zzav;
    public static zzeo<Boolean> zzaw;
    public static zzeo<Boolean> zzax;
    public static zzeo<Boolean> zzay;
    public static zzeo<Boolean> zzaz;
    public static zzeo<Long> zzb = zza("measurement.monitoring.sample_period_millis", 86400000L, 86400000L, zzas.zza);
    public static zzeo<Boolean> zzba;
    public static zzeo<Boolean> zzbb;
    public static zzeo<Boolean> zzbc;
    public static zzeo<Boolean> zzbd;
    public static zzeo<Boolean> zzbe;
    public static zzeo<Boolean> zzbf;
    public static zzeo<Boolean> zzbg;
    public static zzeo<Boolean> zzbh;
    public static zzeo<Boolean> zzbi;
    public static zzeo<Boolean> zzbj;
    public static zzeo<Boolean> zzbk;
    public static zzeo<Boolean> zzbl;
    public static zzeo<Boolean> zzbm;
    public static zzeo<Boolean> zzbn;
    public static zzeo<Boolean> zzbo;
    public static zzeo<Boolean> zzbp;
    public static zzeo<Boolean> zzbq;
    public static zzeo<Boolean> zzbr;
    public static zzeo<Boolean> zzbs;
    public static zzeo<Boolean> zzbt;
    public static zzeo<Boolean> zzbu;
    public static zzeo<Boolean> zzbv;
    public static zzeo<Boolean> zzbw;
    public static zzeo<Boolean> zzbx;
    public static zzeo<Boolean> zzby;
    public static zzeo<Boolean> zzbz;
    public static zzeo<Long> zzc;
    public static zzeo<Boolean> zzca;
    public static zzeo<Boolean> zzcb;
    public static zzeo<Boolean> zzcc;
    public static zzeo<Boolean> zzcd;
    public static zzeo<Boolean> zzce;
    public static zzeo<Boolean> zzcf;
    public static zzeo<Boolean> zzcg;
    public static zzeo<Boolean> zzch;
    public static zzeo<Boolean> zzci;
    public static zzeo<Boolean> zzcj;
    public static zzeo<Boolean> zzck;
    public static zzeo<Boolean> zzcl;
    public static zzeo<Boolean> zzcm;
    public static zzeo<Boolean> zzcn;
    public static zzeo<Boolean> zzco;
    public static zzeo<Boolean> zzcp;
    public static zzeo<Boolean> zzcq;
    public static zzeo<Long> zzcr = zza("measurement.sdk.attribution.cache.ttl", 604800000L, 604800000L, zzeg.zza);
    public static zzeo<Boolean> zzcs;
    private static List<zzeo<?>> zzct = Collections.synchronizedList(new ArrayList());
    private static Set<zzeo<?>> zzcu = Collections.synchronizedSet(new HashSet());
    private static zzeo<Boolean> zzcv;
    private static zzeo<Boolean> zzcw;
    private static zzeo<Boolean> zzcx;
    private static zzeo<Boolean> zzcy;
    private static zzeo<Boolean> zzcz;
    public static zzeo<String> zzd = zza("measurement.config.url_scheme", "https", "https", zzbo.zza);
    public static zzeo<String> zze = zza("measurement.config.url_authority", "app-measurement.com", "app-measurement.com", zzcb.zza);
    public static zzeo<Integer> zzf = zza("measurement.upload.max_bundles", 100, 100, zzck.zza);
    public static zzeo<Integer> zzg = zza("measurement.upload.max_batch_size", 65536, 65536, zzcx.zza);
    public static zzeo<Integer> zzh = zza("measurement.upload.max_bundle_size", 65536, 65536, zzdg.zza);
    public static zzeo<Integer> zzi = zza("measurement.upload.max_events_per_bundle", 1000, 1000, zzdt.zza);
    public static zzeo<Integer> zzj;
    public static zzeo<Integer> zzk = zza("measurement.upload.max_error_events_per_day", 1000, 1000, zzav.zza);
    public static zzeo<Integer> zzl = zza("measurement.upload.max_public_events_per_day", 50000, 50000, zzau.zza);
    public static zzeo<Integer> zzm = zza("measurement.upload.max_conversions_per_day", 10000, 10000, zzax.zza);
    public static zzeo<Integer> zzn = zza("measurement.upload.max_realtime_events_per_day", 10, 10, zzaw.zza);
    public static zzeo<Integer> zzo;
    public static zzeo<String> zzp = zza("measurement.upload.url", "https://app-measurement.com/a", "https://app-measurement.com/a", zzay.zza);
    public static zzeo<Long> zzq = zza("measurement.upload.backoff_period", 43200000L, 43200000L, zzbb.zza);
    public static zzeo<Long> zzr;
    public static zzeo<Long> zzs;
    public static zzeo<Long> zzt = zza("measurement.upload.realtime_upload_interval", 10000L, 10000L, zzbc.zza);
    public static zzeo<Long> zzu = zza("measurement.upload.debug_upload_interval", 1000L, 1000L, zzbe.zza);
    public static zzeo<Long> zzv = zza("measurement.upload.minimum_delay", 500L, 500L, zzbh.zza);
    public static zzeo<Long> zzw;
    public static zzeo<Long> zzx = zza("measurement.upload.stale_data_deletion_interval", 86400000L, 86400000L, zzbj.zza);
    public static zzeo<Long> zzy = zza("measurement.upload.refresh_blacklisted_config_interval", 604800000L, 604800000L, zzbi.zza);
    public static zzeo<Long> zzz = zza("measurement.upload.initial_upload_delay_time", 15000L, 15000L, zzbl.zza);

    static {
        Long valueOf = Long.valueOf((long) ConstantsKt.DEFAULT_TIME_TO_MODIFY_MESSAGE_MS);
        zzc = zza("measurement.config.cache_time", 86400000L, valueOf, zzbf.zza);
        Integer valueOf2 = Integer.valueOf((int) AacUtil.AAC_LC_MAX_RATE_BYTES_PER_SECOND);
        zzj = zza("measurement.upload.max_events_per_day", valueOf2, valueOf2, zzec.zza);
        zzo = zza("measurement.store.max_stored_events_per_app", valueOf2, valueOf2, zzaz.zza);
        zzr = zza("measurement.upload.window_interval", valueOf, valueOf, zzba.zza);
        zzs = zza("measurement.upload.interval", valueOf, valueOf, zzbd.zza);
        Long valueOf3 = Long.valueOf((long) DefaultLoadErrorHandlingPolicy.DEFAULT_TRACK_BLACKLIST_MS);
        zzw = zza("measurement.alarm_manager.minimum_interval", valueOf3, valueOf3, zzbg.zza);
        Boolean bool = Boolean.FALSE;
        zzaj = zza("measurement.test.boolean_flag", bool, bool, zzbt.zza);
        Double valueOf4 = Double.valueOf(-3.0d);
        zzan = zza("measurement.test.double_flag", valueOf4, valueOf4, zzbx.zza);
        zzaq = zza("measurement.validation.internal_limits_internal_event_params", bool, bool, zzby.zza);
        Boolean bool2 = Boolean.TRUE;
        zzar = zza("measurement.referrer.enable_logging_install_referrer_cmp_from_apk", bool2, bool2, zzca.zza);
        zzas = zza("measurement.collection.firebase_global_collection_flag_enabled", bool2, bool2, zzcd.zza);
        zzat = zza("measurement.collection.efficient_engagement_reporting_enabled_2", bool2, bool2, zzcc.zza);
        zzau = zza("measurement.collection.redundant_engagement_removal_enabled", bool, bool, zzcf.zza);
        zzav = zza("measurement.client.freeride_engagement_fix", bool2, bool2, zzce.zza);
        zzaw = zza("measurement.experiment.enable_experiment_reporting", bool2, bool2, zzch.zza);
        zzax = zza("measurement.collection.log_event_and_bundle_v2", bool2, bool2, zzcg.zza);
        zzay = zza("measurement.quality.checksum", bool, bool, null);
        zzaz = zza("measurement.sdk.dynamite.allow_remote_dynamite2", bool, bool, zzcj.zza);
        zzba = zza("measurement.sdk.collection.validate_param_names_alphabetical", bool2, bool2, zzci.zza);
        zzbb = zza("measurement.collection.event_safelist", bool2, bool2, zzcl.zza);
        zzcv = zza("measurement.service.audience.invalidate_config_cache_after_app_unisntall", bool2, bool2, zzcn.zza);
        zzbc = zza("measurement.service.audience.fix_skip_audience_with_failed_filters", bool2, bool2, zzcm.zza);
        zzbd = zza("measurement.audience.use_bundle_end_timestamp_for_non_sequence_property_filters", bool, bool, zzcp.zza);
        zzbe = zza("measurement.audience.refresh_event_count_filters_timestamp", bool, bool, zzco.zza);
        zzbf = zza("measurement.audience.use_bundle_timestamp_for_event_count_filters", bool, bool, zzcr.zza);
        zzbg = zza("measurement.sdk.collection.retrieve_deeplink_from_bow_2", bool2, bool2, zzcq.zza);
        zzbh = zza("measurement.sdk.collection.last_deep_link_referrer2", bool2, bool2, zzct.zza);
        zzbi = zza("measurement.sdk.collection.last_deep_link_referrer_campaign2", bool, bool, zzcs.zza);
        zzbj = zza("measurement.sdk.collection.last_gclid_from_referrer2", bool, bool, zzcv.zza);
        zzbk = zza("measurement.sdk.collection.enable_extend_user_property_size", bool2, bool2, zzcu.zza);
        zzbl = zza("measurement.upload.file_lock_state_check", bool, bool, zzcw.zza);
        zzbm = zza("measurement.sampling.calculate_bundle_timestamp_before_sampling", bool2, bool2, zzcz.zza);
        zzbn = zza("measurement.ga.ga_app_id", bool, bool, zzcy.zza);
        zzbo = zza("measurement.lifecycle.app_backgrounded_tracking", bool2, bool2, zzdb.zza);
        zzbp = zza("measurement.lifecycle.app_in_background_parameter", bool, bool, zzda.zza);
        zzbq = zza("measurement.integration.disable_firebase_instance_id", bool, bool, zzdd.zza);
        zzbr = zza("measurement.lifecycle.app_backgrounded_engagement", bool, bool, zzdc.zza);
        zzbs = zza("measurement.collection.service.update_with_analytics_fix", bool, bool, zzdf.zza);
        zzbt = zza("measurement.service.use_appinfo_modified", bool, bool, zzde.zza);
        zzbu = zza("measurement.client.firebase_feature_rollout.v1.enable", bool2, bool2, zzdh.zza);
        zzbv = zza("measurement.client.sessions.check_on_reset_and_enable2", bool2, bool2, zzdj.zza);
        zzbw = zza("measurement.config.string.always_update_disk_on_set", bool2, bool2, zzdi.zza);
        zzbx = zza("measurement.scheduler.task_thread.cleanup_on_exit", bool, bool, zzdl.zza);
        zzby = zza("measurement.upload.file_truncate_fix", bool, bool, zzdk.zza);
        zzbz = zza("measurement.engagement_time_main_thread", bool2, bool2, zzdn.zza);
        zzca = zza("measurement.sdk.referrer.delayed_install_referrer_api", bool, bool, zzdm.zza);
        zzcb = zza("measurement.sdk.screen.disabling_automatic_reporting", bool, bool, zzdp.zza);
        zzcc = zza("measurement.sdk.screen.manual_screen_view_logging", bool, bool, zzdo.zza);
        zzcd = zza("measurement.gold.enhanced_ecommerce.format_logs", bool2, bool2, zzdr.zza);
        zzce = zza("measurement.gold.enhanced_ecommerce.nested_param_daily_event_count", bool2, bool2, zzdq.zza);
        zzcf = zza("measurement.gold.enhanced_ecommerce.upload_nested_complex_events", bool2, bool2, zzds.zza);
        zzcg = zza("measurement.gold.enhanced_ecommerce.log_nested_complex_events", bool2, bool2, zzdv.zza);
        zzch = zza("measurement.gold.enhanced_ecommerce.updated_schema.client", bool2, bool2, zzdu.zza);
        zzci = zza("measurement.gold.enhanced_ecommerce.updated_schema.service", bool2, bool2, zzdx.zza);
        Boolean bool3 = Boolean.FALSE;
        zzcw = zza("measurement.collection.synthetic_data_mitigation", bool3, bool3, zzdw.zza);
        zzcj = zza("measurement.service.configurable_service_limits", bool2, bool2, zzdz.zza);
        zzck = zza("measurement.client.configurable_service_limits", bool3, bool3, zzdy.zza);
        zzcl = zza("measurement.androidId.delete_feature", bool2, bool2, zzeb.zza);
        zzcm = zza("measurement.client.global_params.dev", bool3, bool3, zzea.zza);
        zzcn = zza("measurement.service.global_params", bool3, bool3, zzed.zza);
        Boolean bool4 = Boolean.TRUE;
        zzco = zza("measurement.service.global_params_in_payload", bool4, bool4, zzef.zza);
        zzcp = zza("measurement.client.string_reader", bool4, bool4, zzee.zza);
        zzcq = zza("measurement.sdk.attribution.cache", bool4, bool4, zzeh.zza);
        zzcs = zza("measurement.service.database_return_empty_collection", bool4, bool4, zzej.zza);
        zzcx = zza("measurement.service.ssaid_removal", bool4, bool4, zzei.zza);
        zzcy = zza("measurement.client.consent_state_v1.dev", bool3, bool3, zzel.zza);
        zzcz = zza("measurement.service.consent_state_v1", bool3, bool3, zzek.zza);
    }

    public static Map<String, String> zza(Context context) {
        zzci zza2 = zzci.zza(context.getContentResolver(), zzcx.zza("com.google.android.gms.measurement"));
        return zza2 == null ? Collections.emptyMap() : zza2.zza();
    }

    @VisibleForTesting
    private static <V> zzeo<V> zza(@Nullable String str, @Nullable V v, @Nullable V v2, @Nullable zzem<V> zzem) {
        zzeo<V> zzeo = new zzeo<>(str, v, v2, zzem);
        zzct.add(zzeo);
        return zzeo;
    }
}
