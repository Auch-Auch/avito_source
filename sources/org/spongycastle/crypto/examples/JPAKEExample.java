package org.spongycastle.crypto.examples;

import a2.b.a.a.a;
import com.avito.android.util.preferences.Preference;
import java.io.PrintStream;
import java.math.BigInteger;
import java.security.SecureRandom;
import org.spongycastle.crypto.CryptoException;
import org.spongycastle.crypto.agreement.jpake.JPAKEParticipant;
import org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroup;
import org.spongycastle.crypto.agreement.jpake.JPAKEPrimeOrderGroups;
import org.spongycastle.crypto.agreement.jpake.JPAKERound1Payload;
import org.spongycastle.crypto.agreement.jpake.JPAKERound2Payload;
import org.spongycastle.crypto.agreement.jpake.JPAKERound3Payload;
import org.spongycastle.crypto.digests.SHA256Digest;
public class JPAKEExample {
    public static BigInteger a(BigInteger bigInteger) {
        SHA256Digest sHA256Digest = new SHA256Digest();
        byte[] byteArray = bigInteger.toByteArray();
        byte[] bArr = new byte[sHA256Digest.getDigestSize()];
        sHA256Digest.update(byteArray, 0, byteArray.length);
        sHA256Digest.doFinal(bArr, 0);
        return new BigInteger(bArr);
    }

    public static void main(String[] strArr) throws CryptoException {
        JPAKEPrimeOrderGroup jPAKEPrimeOrderGroup = JPAKEPrimeOrderGroups.NIST_3072;
        BigInteger p = jPAKEPrimeOrderGroup.getP();
        BigInteger q = jPAKEPrimeOrderGroup.getQ();
        BigInteger g = jPAKEPrimeOrderGroup.getG();
        System.out.println("********* Initialization **********");
        System.out.println("Public parameters for the cyclic group:");
        PrintStream printStream = System.out;
        StringBuilder L = a.L("p (");
        L.append(p.bitLength());
        L.append(" bits): ");
        L.append(p.toString(16));
        printStream.println(L.toString());
        PrintStream printStream2 = System.out;
        StringBuilder L2 = a.L("q (");
        L2.append(q.bitLength());
        L2.append(" bits): ");
        L2.append(q.toString(16));
        printStream2.println(L2.toString());
        PrintStream printStream3 = System.out;
        StringBuilder L3 = a.L("g (");
        L3.append(p.bitLength());
        L3.append(" bits): ");
        L3.append(g.toString(16));
        printStream3.println(L3.toString());
        PrintStream printStream4 = System.out;
        StringBuilder L4 = a.L("p mod q = ");
        L4.append(p.mod(q).toString(16));
        printStream4.println(L4.toString());
        PrintStream printStream5 = System.out;
        StringBuilder L5 = a.L("g^{q} mod p = ");
        L5.append(g.modPow(q, p).toString(16));
        printStream5.println(L5.toString());
        System.out.println("");
        System.out.println("(Secret passwords used by Alice and Bob: \"password\" and \"password\")\n");
        SHA256Digest sHA256Digest = new SHA256Digest();
        SecureRandom secureRandom = new SecureRandom();
        JPAKEParticipant jPAKEParticipant = new JPAKEParticipant("alice", Preference.PASSWORD.toCharArray(), jPAKEPrimeOrderGroup, sHA256Digest, secureRandom);
        JPAKEParticipant jPAKEParticipant2 = new JPAKEParticipant("bob", Preference.PASSWORD.toCharArray(), jPAKEPrimeOrderGroup, sHA256Digest, secureRandom);
        JPAKERound1Payload createRound1PayloadToSend = jPAKEParticipant.createRound1PayloadToSend();
        JPAKERound1Payload createRound1PayloadToSend2 = jPAKEParticipant2.createRound1PayloadToSend();
        System.out.println("************ Round 1 **************");
        System.out.println("Alice sends to Bob: ");
        PrintStream printStream6 = System.out;
        StringBuilder L6 = a.L("g^{x1}=");
        L6.append(createRound1PayloadToSend.getGx1().toString(16));
        printStream6.println(L6.toString());
        PrintStream printStream7 = System.out;
        StringBuilder L7 = a.L("g^{x2}=");
        L7.append(createRound1PayloadToSend.getGx2().toString(16));
        printStream7.println(L7.toString());
        PrintStream printStream8 = System.out;
        StringBuilder L8 = a.L("KP{x1}={");
        L8.append(createRound1PayloadToSend.getKnowledgeProofForX1()[0].toString(16));
        L8.append("};{");
        L8.append(createRound1PayloadToSend.getKnowledgeProofForX1()[1].toString(16));
        L8.append("}");
        printStream8.println(L8.toString());
        PrintStream printStream9 = System.out;
        StringBuilder L9 = a.L("KP{x2}={");
        L9.append(createRound1PayloadToSend.getKnowledgeProofForX2()[0].toString(16));
        L9.append("};{");
        L9.append(createRound1PayloadToSend.getKnowledgeProofForX2()[1].toString(16));
        L9.append("}");
        printStream9.println(L9.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice: ");
        PrintStream printStream10 = System.out;
        StringBuilder L10 = a.L("g^{x3}=");
        L10.append(createRound1PayloadToSend2.getGx1().toString(16));
        printStream10.println(L10.toString());
        PrintStream printStream11 = System.out;
        StringBuilder L11 = a.L("g^{x4}=");
        L11.append(createRound1PayloadToSend2.getGx2().toString(16));
        printStream11.println(L11.toString());
        PrintStream printStream12 = System.out;
        StringBuilder L12 = a.L("KP{x3}={");
        L12.append(createRound1PayloadToSend2.getKnowledgeProofForX1()[0].toString(16));
        L12.append("};{");
        L12.append(createRound1PayloadToSend2.getKnowledgeProofForX1()[1].toString(16));
        L12.append("}");
        printStream12.println(L12.toString());
        PrintStream printStream13 = System.out;
        StringBuilder L13 = a.L("KP{x4}={");
        L13.append(createRound1PayloadToSend2.getKnowledgeProofForX2()[0].toString(16));
        L13.append("};{");
        L13.append(createRound1PayloadToSend2.getKnowledgeProofForX2()[1].toString(16));
        L13.append("}");
        printStream13.println(L13.toString());
        System.out.println("");
        jPAKEParticipant.validateRound1PayloadReceived(createRound1PayloadToSend2);
        System.out.println("Alice checks g^{x4}!=1: OK");
        System.out.println("Alice checks KP{x3}: OK");
        System.out.println("Alice checks KP{x4}: OK");
        System.out.println("");
        jPAKEParticipant2.validateRound1PayloadReceived(createRound1PayloadToSend);
        System.out.println("Bob checks g^{x2}!=1: OK");
        System.out.println("Bob checks KP{x1},: OK");
        System.out.println("Bob checks KP{x2},: OK");
        System.out.println("");
        JPAKERound2Payload createRound2PayloadToSend = jPAKEParticipant.createRound2PayloadToSend();
        JPAKERound2Payload createRound2PayloadToSend2 = jPAKEParticipant2.createRound2PayloadToSend();
        System.out.println("************ Round 2 **************");
        System.out.println("Alice sends to Bob: ");
        PrintStream printStream14 = System.out;
        StringBuilder L14 = a.L("A=");
        L14.append(createRound2PayloadToSend.getA().toString(16));
        printStream14.println(L14.toString());
        PrintStream printStream15 = System.out;
        StringBuilder L15 = a.L("KP{x2*s}={");
        L15.append(createRound2PayloadToSend.getKnowledgeProofForX2s()[0].toString(16));
        L15.append("},{");
        L15.append(createRound2PayloadToSend.getKnowledgeProofForX2s()[1].toString(16));
        L15.append("}");
        printStream15.println(L15.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice");
        PrintStream printStream16 = System.out;
        StringBuilder L16 = a.L("B=");
        L16.append(createRound2PayloadToSend2.getA().toString(16));
        printStream16.println(L16.toString());
        PrintStream printStream17 = System.out;
        StringBuilder L17 = a.L("KP{x4*s}={");
        L17.append(createRound2PayloadToSend2.getKnowledgeProofForX2s()[0].toString(16));
        L17.append("},{");
        L17.append(createRound2PayloadToSend2.getKnowledgeProofForX2s()[1].toString(16));
        L17.append("}");
        printStream17.println(L17.toString());
        System.out.println("");
        jPAKEParticipant.validateRound2PayloadReceived(createRound2PayloadToSend2);
        System.out.println("Alice checks KP{x4*s}: OK\n");
        jPAKEParticipant2.validateRound2PayloadReceived(createRound2PayloadToSend);
        System.out.println("Bob checks KP{x2*s}: OK\n");
        BigInteger calculateKeyingMaterial = jPAKEParticipant.calculateKeyingMaterial();
        BigInteger calculateKeyingMaterial2 = jPAKEParticipant2.calculateKeyingMaterial();
        System.out.println("********* After round 2 ***********");
        PrintStream printStream18 = System.out;
        StringBuilder L18 = a.L("Alice computes key material \t K=");
        L18.append(calculateKeyingMaterial.toString(16));
        printStream18.println(L18.toString());
        PrintStream printStream19 = System.out;
        StringBuilder L19 = a.L("Bob computes key material \t K=");
        L19.append(calculateKeyingMaterial2.toString(16));
        printStream19.println(L19.toString());
        System.out.println();
        a(calculateKeyingMaterial);
        a(calculateKeyingMaterial2);
        JPAKERound3Payload createRound3PayloadToSend = jPAKEParticipant.createRound3PayloadToSend(calculateKeyingMaterial);
        JPAKERound3Payload createRound3PayloadToSend2 = jPAKEParticipant2.createRound3PayloadToSend(calculateKeyingMaterial2);
        System.out.println("************ Round 3 **************");
        System.out.println("Alice sends to Bob: ");
        PrintStream printStream20 = System.out;
        StringBuilder L20 = a.L("MacTag=");
        L20.append(createRound3PayloadToSend.getMacTag().toString(16));
        printStream20.println(L20.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice: ");
        PrintStream printStream21 = System.out;
        StringBuilder L21 = a.L("MacTag=");
        L21.append(createRound3PayloadToSend2.getMacTag().toString(16));
        printStream21.println(L21.toString());
        System.out.println("");
        jPAKEParticipant.validateRound3PayloadReceived(createRound3PayloadToSend2, calculateKeyingMaterial);
        System.out.println("Alice checks MacTag: OK\n");
        jPAKEParticipant2.validateRound3PayloadReceived(createRound3PayloadToSend, calculateKeyingMaterial2);
        System.out.println("Bob checks MacTag: OK\n");
        System.out.println();
        System.out.println("MacTags validated, therefore the keying material matches.");
    }
}
